DESCRIPTION: 
  Test different cases to test function's efficiency.

HOW TO URN THE TEST IN COMMAND LINE:
  `$ python3 -m doctest -v ./tests/2-matrix_divided.txt | tail -2`

1. IMPORT METHOD TO TEST:
  >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

2. TEST CASES CONSIDERED:

Note: div is a number for teh first 3 cases!

Test for when matrix is of type not list:
        >>> print(matrix_divided("String", 2))
        Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats
        >>> print(matrix_divided(5, 2.5))
        Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

Test for when length of matrix is zero:
        >>> print(matrix_divided([], 5))
        Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

        Test for when len of matrix[0] is zero:
        >>> print(matrix_divided([[]], 7))
        Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

Test for when matrix is of correct type ad div is number:
        >>> print(matrix_divided([[1, 2, 3],[4, 5, 6]], 3))
        [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Test for when matrix is of correct type ad div is not number:
        >>> print(matrix_divided([[1, 2, 3],[4, 5, 6]], "String"))
        Traceback (most recent call last):
        ...
        TypeError: div must be a number

Test for when matrix contains unacceptables data types and div is number:
        >>> print(matrix_divided([[1, "h", 2.6],[4, [], 6]], 3))
        Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

Test for when nothing is passed to the function:
        >>> print(matrix_divided())
        Traceback (most recent call last):
        ...
        TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

Test for either matrix or div None:
        >>> print(matrix_divided(matrix=None, div=3))
        Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats
        >>> print(matrix_divided(matrix=[[1, 2, 3],[4, 5, 6]], div=None))
        Traceback (most recent call last):
        ...
        TypeError: div must be a number

Test for when too many input args passed to function:
        >>> print(matrix_divided([[1, 2, 3],[4, 5, 6]], 2, 5))
        Traceback (most recent call last):
        ...
        TypeError: matrix_divided() takes 2 positional arguments but 3 were given

Test for division by zero:
        >>> print(matrix_divided(matrix=[[1, 2, 3],[4, 5, 6]], div=0))
        Traceback (most recent call last):
        ...
        ZeroDivisionError: division by zero

Test for when you divide by True is matrix has True and False:
        >>> print(matrix_divided(matrix=[[False],[True]], div=True))
        [[0.0], [1.0]]