DESCRIPTION: 
        Test different cases to test function's efficiency.

HOW TO URN THE TEST IN COMMAND LINE:
        `$ python3 -m doctest -v ./tests/4-print_square.txt`

1. IMPORT METHOD TO TEST:
        >>> print_square = __import__('4-print_square').print_square

2. TEST CASES CONSIDERED:

Test for when size is of different type:
        >>> print_square("String")
        Traceback (most recent call last):
        ...
        TypeError: size must be an integer
        >>> print_square([])
        Traceback (most recent call last):
        ...
        TypeError: size must be an integer
        >>> print_square({})
        Traceback (most recent call last):
        ...
        TypeError: size must be an integer

Test for when nothing is passed to the function:
        >>> print_square()
        Traceback (most recent call last):
        ...
        TypeError: print_square() missing 1 required positional argument: 'size'

Test for when size is None:
        >>> print_square(None)
        Traceback (most recent call last):
        ...
        TypeError: size must be an integer

Test for when too many input args passed to function:
        >>> print_square(4, 5, 8)
        Traceback (most recent call last):
        ...
        TypeError: print_square() takes 1 positional argument but 3 were given

Test for when True or False are passed to function:
        >>> print_square(True)
        #

Test for when size causes program overflow:
        >>> print_square(float("inf"))
        Traceback (most recent call last):
        ...
        TypeError: size must be an integer

Test for when size is a corrent and valid type:
        >>> print_square(4)
        ####
        ####
        ####
        ####

Test for when size if negative:
        >>> print_square(-5)
        Traceback (most recent call last):
        ...
        ValueError: size must be >= 0